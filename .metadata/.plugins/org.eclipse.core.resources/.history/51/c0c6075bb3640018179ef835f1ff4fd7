package com.saucypixelstudios.trixeltechnician.essentials;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;

import javax.imageio.ImageIO;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;

import com.saucypixelstudios.trixeltechnician.UI.ColorPickerMenu;
import com.saucypixelstudios.trixeltechnician.UI.CornerMenu;
import com.saucypixelstudios.trixeltechnician.UI.ScrollBar;
import com.saucypixelstudios.trixeltechnician.UI.ZoomSlider;
import com.saucypixelstudios.trixeltechnician.camera.Camera;
import com.saucypixelstudios.trixeltechnician.trixels.Trixel;
import com.saucypixelstudios.trixeltechnician.trixels.TrixelHandler;

public class TrixelTechnicianPanel extends JPanel implements KeyListener, MouseListener{
	JTextField typingArea;
	static Window window;
	TrixelHandler trixelHandler;
	boolean mouseDown;
	int mouseButton;
	boolean paneOpen;
	boolean sliding;
	boolean onTrixel;
	Camera camera;
	ZoomSlider zoomSlider;
	ScrollBar yScroll;
	ScrollBar xScroll;
	boolean xScrolling;
	boolean yScrolling;
	boolean grid;
	int mX;
	int mY;
	boolean GUI;
	CornerMenu menu;

	public TrixelTechnicianPanel(Window window){
		setBackground(Color.decode("#FFFFFF"));
		setPreferredSize(new Dimension(Window.WIDTH, Window.HEIGHT));
		setDoubleBuffered(true);
		setVisible(true);
		
		this.window = window;
		mouseDown = false;
		mouseButton = MouseEvent.BUTTON1;
		paneOpen = false;
		sliding = false;
		onTrixel = false;
		xScrolling = false;
		yScrolling = false;
		grid = false;
		GUI = true;
		
		typingArea = new JTextField();
		typingArea.addKeyListener(this);
		addMouseListener(this);
		add(typingArea, BorderLayout.PAGE_START);
		

		trixelHandler = new TrixelHandler();
		camera = new Camera(0, 0, 1);
		zoomSlider = new ZoomSlider(5, camera, (int) Toolkit.getDefaultToolkit().getScreenSize().getWidth());
		xScroll = new ScrollBar(ScrollBar.X_AXIS);
		yScroll = new ScrollBar(ScrollBar.Y_AXIS);
	}

	public void run() throws NumberFormatException, IOException{
		mX = getMouseX()-4;
		mY = getMouseY()-26;

		if(menu == null) {			
			menu = new CornerMenu(window.getContentPane().getWidth() - 35, window.getContentPane().getHeight() - 45);
			
			menu.addColorPalette();
			menu.addCheckbox(false, "Hello.");
			menu.addCheckbox(true, "Hello World.");	
		}
		
		//System.out.println("Mouse: " + mX + ", " + mY);

		if(true){ //check if menu is under mouse
			onTrixel = false;
			for(int tW = 0; tW < trixelHandler.trixels.length; tW++)
				for(int tH = 0; tH < trixelHandler.trixels[0].length; tH++){
					Trixel trixel = trixelHandler.trixels[tW][tH];
					if(camera.relativeTrixel(trixel).contains(new Point(mX, mY))){
						trixelHandler.curTrixel = trixel;
						//System.out.println("Shape: " + trixel.getShape().xpoints[0] + ", " + trixel.getShape().ypoints[0]);
						onTrixel = true;
					}
				}

			if(mouseDown && (zoomSlider.containedInHitbox(mX, mY) || sliding) && !xScrolling && !yScrolling){
				sliding = true;
				camera.setZoom(zoomSlider.mouseInteraction(mX, mY));
			}
			else if(mouseDown && (xScroll.collidesWithGrip(mX, mY) || xScrolling)){
				xScrolling = true;
				xScroll.mouseInteraction(mX, mY, camera, trixelHandler);
			}
			else if(mouseDown && (yScroll.collidesWithGrip(mX, mY) || yScrolling)){
				yScrolling = true;
				yScroll.mouseInteraction(mX, mY, camera, trixelHandler);
			}
			else if(mouseDown && mouseButton == MouseEvent.BUTTON1)
				trixelHandler.fillCurTrixel(trixelHandler.PRIMARY);
			else if(mouseDown && mouseButton == MouseEvent.BUTTON3)
				trixelHandler.fillCurTrixel(trixelHandler.SECONDARY);
		}
		if(!onTrixel)
			trixelHandler.curTrixel = null;
	}

	public void export(){
		BufferedImage bi = new BufferedImage(this.getSize().width, this.getSize().height, BufferedImage.TYPE_INT_ARGB); 
		Graphics g = bi.createGraphics();
		GUI = false;
		this.paint(g);  //this == JComponent
		g.dispose();
		try{ImageIO.write(bi,"png",new File("Trixel Technician Art.png"));}catch (Exception e) {}
		GUI = true;
	}
	
	public void save(String fileName) {
		trixelHandler.saveTrixelMap(fileName);
	}
	
	public void save() {
		save(JOptionPane.showInputDialog("File name:") + ".trxm");
	}

	public void paint(Graphics g){
		super.paint(g);

		Graphics2D g2 = (Graphics2D) g;
		g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
		    RenderingHints.VALUE_ANTIALIAS_ON);
		
		for(int t = 0; t < trixelHandler.trixels.length; t++){
			for(int tH = 0; tH < trixelHandler.trixels[0].length; tH++){
				if(trixelHandler.trixels[t][tH] != null)
					camera.fillTrixelRelative(g2, trixelHandler.trixels[t][tH], trixelHandler);
				if(grid && GUI){
					camera.drawTrixelRelative(grid, g2, trixelHandler.trixels[t][tH], trixelHandler);
				}
			}
		}
		if(onTrixel && GUI)
			camera.drawTrixelRelative(false, g2, trixelHandler.curTrixel, trixelHandler);

		if(GUI){
			zoomSlider.drawZoomSlider(g, (int) Toolkit.getDefaultToolkit().getScreenSize().getWidth());
			xScroll.drawBar(g);
			yScroll.drawBar(g);
			menu.drawMenu(g);
		}
	}

	public int getMouseX(){
		try{
			return (int) (window.getMousePosition().getX());
		} catch(Exception e){}
		return 0;
	}

	public int getMouseY(){
		try{
			return (int) (window.getMousePosition().getY());
		} catch(Exception e){}
		return 0;
	}

	@Override
	public void mouseClicked(MouseEvent e) {
		//trixelHandler.primaryColor = ;
		menu.mouseClicked(e.getX(), e.getY());
	}

	@Override
	public void mouseEntered(MouseEvent e) {}

	@Override
	public void mouseExited(MouseEvent e) {}

	@Override
	public void mousePressed(MouseEvent e) {
		if(xScroll.collidesWithGrip(mX, mY))
			xScroll.grabBar(mX, mY);
		if(yScroll.collidesWithGrip(mX, mY))
			yScroll.grabBar(mX, mY);
		mouseDown = true;
		mouseButton = e.getButton();
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		mouseDown = false;
		sliding = false;
		xScrolling = false;
		yScrolling = false;
		xScroll.releaseBar();
		yScroll.releaseBar();
		mouseButton = e.getButton();
	}

	@Override
	public void keyPressed(KeyEvent e) {
		if(e.getKeyChar() == 'c')
			colorPickerOpen = true;
	}

	@Override
	public void keyReleased(KeyEvent e) {
		if(e.getKeyChar() == 'c')
			colorPickerOpen = false;
	}

	@Override
	public void keyTyped(KeyEvent e) {
		if(e.getKeyChar() == 'x'){
			paneOpen = true;
			trixelHandler.primaryColor = Color.decode("#" + JOptionPane.showInputDialog("Enter the hex code you would like the primary color to be:"));
			paneOpen = false;
		}
		else if(e.getKeyChar() == 'v'){
			paneOpen = true;
			trixelHandler.secondaryColor = Color.decode("#" + JOptionPane.showInputDialog("Enter the hex code you would like the secondary color to be:"));
			paneOpen = false;
		}	
		else if(e.getKeyChar() == 'h'){
			paneOpen = true;
			colorPickerMenu.addColorToPalette(Color.decode("#" + JOptionPane.showInputDialog("Enter the hex code you would like to add to your palette:")));
			paneOpen = false;
		}	
		else if(e.getKeyChar() == 's'){
			paneOpen = true;
			if(JOptionPane.showConfirmDialog(null, 
					"Would you like to save your current drawing?", 
					"Choose", 
					JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION)
				save();
			paneOpen = false;
		}
		else if(e.getKeyChar() == 'z'){
			camera.setZoom(1);
		}
		else if(e.getKeyChar() == 'g'){
			if(grid == true)
				grid = false;
			else if(grid == false)
				grid = true;
			System.out.println(grid);
		}
	}
}
