package com.saucypixelstudios.trixeltechnician.camera;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Polygon;
import java.awt.RenderingHints;

import com.saucypixelstudios.trixeltechnician.trixels.Trixel;
import com.saucypixelstudios.trixeltechnician.trixels.TrixelBaseSideLength;
import com.saucypixelstudios.trixeltechnician.trixels.TrixelHandler;

public class Camera {
	private int x;
	private int y;
	private double zoom;

	public Camera(int x, int y, double zoom){
		this.x = x;
		this.y = y;
		this.zoom = zoom;
	}
	
	public void fillTrixelRelative(Graphics2D g, Trixel trixel, TrixelHandler trixelHandler){
		Polygon scaledShape = relativeTrixel(trixel);

		g.setColor(trixel.getColor());
		
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
			    RenderingHints.VALUE_ANTIALIAS_OFF);
		
		g.fillPolygon(scaledShape);
		
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
			    RenderingHints.VALUE_ANTIALIAS_ON);

		g.setStroke(new BasicStroke((float) 1.1));
		g.drawPolygon(scaledShape);
		g.setStroke(new BasicStroke(1));
	}

	public void drawTrixelRelative(Boolean grid, Graphics g, Trixel trixel, TrixelHandler trixelHandler){
		Polygon scaledShape = relativeTrixel(trixel);
		
		if(grid)
		g.setColor(Color.LIGHT_GRAY);
		else g.setColor(Color.BLACK);
		g.drawPolygon(scaledShape);
	}
	
	public Polygon relativeTrixel(Trixel trixel){
		Polygon shape = trixel.getShape();
		int nPoints = shape.npoints; 
		int[] xPoints = new int[nPoints];
		int[] yPoints = new int[nPoints];
		for(int i = 0; i < nPoints; i++){
			xPoints[i] = (int) (shape.xpoints[i] * zoom);
			xPoints[i] -= x;
			yPoints[i] = (int) (shape.ypoints[i] * zoom);
			yPoints[i] -= y;
		}
		return new Polygon(xPoints, yPoints, nPoints);
	}

	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}

	public double getZoom() {
		return zoom;
	}

	public void setZoom(double zoom) {
		this.zoom = zoom;
	}
	
	public int widthOfTrixelGrid(TrixelHandler trixelHandler){
		return (int) (trixelHandler.trixels.length * TrixelBaseSideLength.getMedian() * zoom);
	}
	
	public int heightOfTrixelGrid(TrixelHandler trixelHandler){
		return (int) (trixelHandler.trixels[0].length / 2 * TrixelBaseSideLength.LENGTH * zoom);
	}
}
