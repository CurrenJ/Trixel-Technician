package com.saucypixelstudios.trixeltechnician.trixels;

import java.awt.Color;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.StringTokenizer;

import javax.swing.JOptionPane;

public class TrixelHandler {
	public static Trixel[][] trixels;
	public static Trixel curTrixel;
	public static Color primaryColor;
	public static Color secondaryColor;
	public static final int PRIMARY = 0;
	public static final int SECONDARY = 1;

	public TrixelHandler(){
//		int horizontal = (int) (Toolkit.getDefaultToolkit().getScreenSize().getWidth() / TrixelBaseSideLength.getMedian());
//		int vertical = (int) (Toolkit.getDefaultToolkit().getScreenSize().getHeight() / TrixelBaseSideLength.LENGTH * 2);
//		trixels = new Trixel[horizontal][vertical];
		init();

		curTrixel = null;
		primaryColor = Color.decode("#801515");
		secondaryColor = Color.decode("#550000");
		for(int tW = 0; tW < trixels.length; tW++){
			for(int tH = 0; tH < trixels[0].length; tH++){
				int direction = TrixelDirectionMap.LEFT;
				if(tW % 2 == 0){
					if(tH % 2 == 0)
						direction = TrixelDirectionMap.RIGHT;
				}
				else if(tW % 2 == 1){
					if(tH % 2 == 1)
						direction = TrixelDirectionMap.RIGHT;
				}
				Trixel trixel = new Trixel(1, direction, (int) (tW * TrixelBaseSideLength.getMedian()), tH * TrixelBaseSideLength.LENGTH / 2);
				trixel.setColor("ffffff");
				trixels[tW][tH] = trixel;
			}
		}
		System.out.println("Trixel grid size: " + trixels.length + ", " + trixels[0].length);
	}

	public void setTrixel(int indexX, int indexY, Trixel trixel){
		trixels[indexX][indexY] = trixel;
	}

	public void fillCurTrixel(int colorChoice) {
		if(colorChoice == PRIMARY)
			curTrixel.setColor(primaryColor);
		else if(colorChoice == SECONDARY)
			curTrixel.setColor(secondaryColor);
	}
	
	public static void init(){
		Object[] options = {"Create New Trixel Map", "Load Existing Trixel Map"};
		
		if(JOptionPane.showOptionDialog(null,
				"What would you like to do?",
				"",
				JOptionPane.YES_NO_CANCEL_OPTION,
				JOptionPane.QUESTION_MESSAGE,
				null,//do not use a custom Icon
				options,//the titles of buttons
				options[0]) == 0) {
			trixels  = new Trixel[(Integer.parseInt(JOptionPane.showInputDialog("X Axis Length (in trixels): ")))][(Integer.parseInt(JOptionPane.showInputDialog("Y Axis Length (in trixels): ")))];
			TrixelBaseSideLength.init();
		}
		else {
			loadTrixelMap(JOptionPane.showInputDialog("Enter name of the Trixel Map (excluding .trxm)"));
		}
	}
	
	public void saveTrixelMap(String fileName) {
		File file = null;
		FileWriter writer;
		
		try {
			file = new File(fileName);
			
			if(file.isFile() && file.exists()) {
				file.delete();
			}
			file.createNewFile();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		try {
			writer = new FileWriter(fileName);
			writer.write(trixels.length + "," + trixels[0].length + "," + TrixelBaseSideLength.LENGTH + "\n");

			for(int tW = 0; tW < trixels.length; tW++){
				for(int tH = 0; tH < trixels[0].length; tH++){
					if(tH != trixels[0].length-1)
						writer.write(String.format("#%02x%02x%02x", trixels[tW][tH].getColor().getRed(), trixels[tW][tH].getColor().getGreen(), trixels[tW][tH].getColor().getBlue()) + ",");
					else writer.write(String.format("#%02x%02x%02x", trixels[tW][tH].getColor().getRed(), trixels[tW][tH].getColor().getGreen(), trixels[tW][tH].getColor().getBlue()));
				}
				writer.write("\n");
			}
			writer.close();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		
		

	}
	
	private static void loadTrixelMap(String fileName) {
		System.out.println("Attempting to load \"" + fileName + ".trxm\"");
		
		FileReader r;
		BufferedReader reader = null;
		ArrayList<String> linesList = null;
		try {
			r = new FileReader(fileName + ".trxm");
			reader = new BufferedReader(r);
			
			new ArrayList<String>();
			String str = reader.readLine();
			while(str != null) {
				linesList.add(str);
				str = reader.readLine();
			}
		} catch(Exception e) {
			e.printStackTrace();
		}
		
		
		
		String[] lines = (String[]) linesList.toArray();
		
		
		StringTokenizer dimsTokenizer = new StringTokenizer(lines[0], ",\n");
		
		int xTrix = Integer.parseInt(dimsTokenizer.nextToken());
		int yTrix = Integer.parseInt(dimsTokenizer.nextToken());
		trixels = new Trixel[xTrix][yTrix];
		
		TrixelBaseSideLength.init(Integer.parseInt(dimsTokenizer.nextToken()));
		
		for(int l = 2; l < lines.length; l++) {
			StringTokenizer trixTokenizer = new StringTokenizer(lines[l], ",\n");
			int lineX = 0;
			while(trixTokenizer.hasMoreTokens()) {
				trixels[lineX][l] = new Trixel(1, (l % 2 == 0) ? TrixelDirectionMap.RIGHT : TrixelDirectionMap.LEFT, lineX * TrixelBaseSideLength.getMedian(), l * TrixelBaseSideLength.LENGTH / 2);
				trixels[lineX][l].setColor(trixTokenizer.nextToken());
				
				lineX++;
			}
		}

	}
}
